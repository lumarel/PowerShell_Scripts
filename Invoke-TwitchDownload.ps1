#requires -version 6.0

<#
.SYNOPSIS
    Script to download clips or videos from Twitch by channels (name or id) or subscribed channels by a user

.DESCRIPTION
    As Twitch changed its way how the frontend looks it isn't that simple anymore to parse the clips/videos, as well as download them.
    This script should solve this problem as it fetches the clips/videos and downloads them via youtube-dl.exe

.PARAMETER Subscription
    This switch will search for all followed accounts of the token owner

.PARAMETER Identity
    This is the descriptive name which has been chosen by the user
    And it will only download the videos/clips of this user

.PARAMETER IdentityID
    This is the autogenerated userid which has been given by Twitch
    And it will only download the videos/clips of this user

.PARAMETER CreatorIdentity
    This is the descriptive name which has been chosen by the clipper, aka. username

.PARAMETER CreatorIdentityID
    This is the autogenerated userid which has been given by Twitch to the clipper

.PARAMETER SelfDownload
    Only download videos or clips made by the token owner

.PARAMETER VODDownload
    This switch switches to video/VOD download
    Attention, this might take a long time, as these videos are massively larger than clips!

.PARAMETER FilePath
    Specifies the output-directory to which the files will be downloaded
    By default it is the Downloads directory

.PARAMETER YoutubeDLexe
    Specifies the path to the youtube-dl executable
    By default it is configured to find the executable in the user/system PATH variable
    It's defaulting to yt-dlp now, so if needed switch it to youtube-dl
    You can get both projects here: https://github.com/yt-dlp/yt-dlp/releases
    and here: https://github.com/ytdl-org/youtube-dl/releases

.PARAMETER TwitchCLIexe
    Specifies the path to the twitch-cli executable.
    By default it is configured to find the executable in the user/system PATH variable.
    You can get the executable from here: https://github.com/twitchdev/twitch-cli/releases

.PARAMETER DownloadTrials
    Maximum Trials for every Download
    By default it is configured with the value 42

.PARAMETER APITrials
    Maximum Trials for every Pagination fetch
    By default it is configured with the value 42

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -Subscription

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -Subscription -SelfDownload

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -Subscription -CreatorIdentity 'Twitch'

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -Subscription -VODDownload

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -Subscription -FilePath ($env:USERPROFILE + '\Desktop')

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -Identity 'Twitch'

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -Identity 'Twitch' -VODDownload

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_id '123456789'

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_id '123456789' -VODDownload

.NOTES
    Having problems with downloading? Update the youtube-dl.exe first, there might already be a fix for that!
#>

param(
    [Parameter(Mandatory,ParameterSetName='subscriptions')]
    [Parameter(Mandatory,ParameterSetName='subscriptions_name')]
    [Parameter(Mandatory,ParameterSetName='subscriptions_id')]
    [Parameter(Mandatory,ParameterSetName='subscriptions_self')]
    [switch]$Subscription,
    [Parameter(Mandatory,ParameterSetName='name')]
    [Alias('UserName', 'broadcaster_name')][string]$Identity,
    [Parameter(Mandatory,ParameterSetName='id')]
    [Alias('broadcaster_id')][string]$IdentityID,
    [Parameter(Mandatory,ParameterSetName='subscriptions_name')]
    [string]$CreatorIdentity,
    [Parameter(Mandatory,ParameterSetName='subscriptions_id')]
    [string]$CreatorIdentityID,
    [Parameter(Mandatory,ParameterSetName='subscriptions_self')]
    [switch]$SelfDownload,
    [Parameter(ParameterSetName='subscriptions')]
    [Parameter(ParameterSetName='subscriptions_id')]
    [Parameter(ParameterSetName='name')]
    [Parameter(ParameterSetName='id')]
    [switch]$VODDownload,
    [string]$FilePath = (Join-Path -Path ~ -ChildPath 'Downloads'),
    [string]$YoutubeDLexe = 'yt-dlp',
    [string]$TwitchCLIexe = 'twitch',
    [int]$DownloadTrials = 42,
    [int]$APITrials = 42
)
function Invoke-TwitchCLI {
    param(
        [Parameter(Mandatory)][string]$TwitchCLIexe,
        [Parameter(Mandatory)][ValidateSet('get','post','put','patch','delete')]
        [string]$Command,
        [Parameter(Mandatory)][string]$Template,
        [string[]][Parameter()]$Query
    )

    $ExecString = $TwitchCLIexe + ' api ' + $Command + ' ' + $Template
    $QueryString = ''
    if ($Query.Count -ge 1) {
        $QueryString = '-q ' + ($Query -join ' -q ')
        $ExecString =  $ExecString + ' ' + $QueryString   
    }
    
    $response = Invoke-Expression $ExecString
    $jsonResponse = $response | ConvertFrom-Json
    if ($jsonResponse.status -eq '404') {
        throw 'Endpoint not available'
    } elseif (-not $jsonResponse.data) {
        throw 'Data missing'
    }

    return $jsonResponse
}

if ($Subscription) {
    Write-Verbose -Message 'Get user id for logged in user'
    $jsonUserData = Invoke-TwitchCLI -TwitchCLIexe $TwitchCLIexe -Command 'get' -Template '/users'
    $IdentityID = $jsonUserData.data.id

    Write-Verbose -Message 'Searching for subscribed channels'
    $UserFollows = @()
    $UserFollowsPagination = ''
    $UserFollowsPaginationCount = 1
    do {
        Write-Verbose -Message "Invoking request to get followed channels $($UserFollowsPaginationCount * 100 - 99) to $($UserFollowsPaginationCount * 100)"
        $jsonUserFollows = ''
        do {
            try {
                $jsonUserFollows = Invoke-TwitchCLI -TwitchCLIexe $TwitchCLIexe -Command 'get' -Template '/channels/followed' -Query @("user_id=$IdentityID",'first=100',"after=$UserFollowsPagination")
            }
            catch {
                Write-Verbose -Message 'An Error occurred while requesting something from the API'
            }
        } until ($null -ne $jsonUserFollows.data)

        $UserFollows += $jsonUserFollows.data
        $UserFollowsPagination = $jsonUserFollows.pagination.cursor

        $UserFollowsPaginationCount++
    } while ($null -ne $UserFollowsPagination)
} elseif ($Identity) {
    Write-Verbose -Message 'Get user id for the users identiy'
    $jsonUserData = Invoke-TwitchCLI -TwitchCLIexe $TwitchCLIexe -Command 'get' -Template '/users' -Query @("login=$Identity")
    $IdentityID = $jsonUserData.data.id

    $UserFollows = @{}
    $UserFollows | Add-Member -Name 'broadcaster_id' -Value $IdentityID -MemberType NoteProperty
} elseif ($IdentityID) {
    $UserFollows = @{}
    $UserFollows | Add-Member -Name 'broadcaster_id' -Value $IdentityID -MemberType NoteProperty
}

if ($CreatorIdentity) {
    Write-Verbose -Message 'Get user id for the creators identiy'
    $jsonCreatorData = Invoke-TwitchCLI -TwitchCLIexe $TwitchCLIexe -Command 'get' -Template '/users' -Query @("login=$CreatorIdentity")
    $CreatorIdentityID = $jsonCreatorData.data.id
}

$UserFollowsCount = 1
foreach ($UserFollow in $UserFollows) {
    if ($Subscription) {
        Write-Progress -Activity "Follow of $($UserFollow.broadcaster_name)" -PercentComplete (($UserFollowsCount / $UserFollows.Count) * 100) -Status "Follow $UserFollowsCount of $($UserFollows.Count)"
    }

    $AccountContents = @()
    $AccountContentsPagination = ''
    $AccountContentsPaginationCount = 1
    do {
        $jsonAccountContents = ''
        $CurrentAPITrials = $APITrials
        if ($VODDownload) {
            Write-Verbose -Message "Invoking request to get video $($AccountContentsPaginationCount * 100 - 99) to $($AccountContentsPaginationCount * 100)"
            $AccountContentTemplate = '/videos'
        } else {
            Write-Verbose -Message "Invoking request to get clip $($AccountContentsPaginationCount * 100 - 99) to $($AccountContentsPaginationCount * 100)"
            $AccountContentTemplate = '/clips'
        }
        do {
            $CurrentAPITrials--
            if ($CurrentAPITrials -le 5) {
                Write-Verbose "There are only $CurrentAPITrials left, sleeping for 10 seconds to try to mitigate a rate limit"
                Start-Sleep -Seconds 10
            }
            try {
                $jsonAccountContents = Invoke-TwitchCLI -TwitchCLIexe $TwitchCLIexe -Command 'get' -Template $AccountContentTemplate -Query @("user_id=$($UserFollow.broadcaster_id)",'first=100',"after=$AccountContentsPagination")
            }
            catch {
                Write-Verbose -Message 'An Error occurred while requesting something from the API'
            }
            Write-Verbose -Message "API request has $CurrentAPITrials Trials left"
        } until (($null -ne $jsonAccountContents.data) -or ($CurrentAPITrials -le 0))
        if ($CurrentAPITrials -le 0) {
            Write-Verbose "The fetch of $($UserFollow.broadcaster_name) was unsuccessful, only approximately $($AccountContentsPaginationCount * 100) videos or clips got parsed"
        }

        $AccountContents += $jsonAccountContents.data
        $AccountContentsPagination = $jsonAccountContents.pagination.cursor

        $AccountContentsPaginationCount++
    } while ($null -ne $AccountContentsPagination)

    if ($CreatorIdentityID) {
        $AccountContents = $AccountContents | Where-Object creator_id -eq $CreatorIdentityID
    }

    $AccountContentsCount = 1
    foreach ($AccountContent in $AccountContents) {
        Write-Progress -Id 1 -Activity "Downloading clips/videos of $($AccountContent.broadcaster_name)" -PercentComplete (($AccountContentsCount / $AccountContents.Count) * 100) -Status "Clip/Video $AccountContentsCount of $($AccountContents.Count)"
        $FileName = $AccountContent.created_at.Year.ToString('0000') + '-' + $AccountContent.created_at.Month.ToString('00') + '-' + $AccountContent.created_at.Day.ToString('00') + '_' + $AccountContent.created_at.Hour.ToString('00') + '#' + $AccountContent.created_at.Minute.ToString('00') + '#' + $AccountContent.created_at.Second.ToString('00') + '_' + $AccountContent.title + '_' + $AccountContent.broadcaster_name + '_' + $AccountContent.creator_name + '.%(ext)s'
        $FileNameNormalized = $FileName -replace ' ','_' -replace '\\','' -replace '/',''
        $FullPath = Join-Path -Path $FilePath -ChildPath $FileNameNormalized
        $CurrentDownloadTrials = $DownloadTrials
        do {
            $CurrentDownloadTrials--
            $AccountContent.url | & $YoutubeDLexe --batch-file - --output $FullPath --quiet --abort-on-error
            Write-Verbose -Message "Download exited with $LASTEXITCODE (0=Successful|1=Failure) $CurrentDownloadTrials Trials left"
        } until (($LASTEXITCODE -eq 0) -or ($CurrentDownloadTrials -le 0))
        if ($CurrentDownloadTrials -le 0) {
            Write-Verbose "The download of $($AccountContent.url) wasn't successful, please try it manually"
        }

        $AccountContentsCount++
    }

    Write-Progress -Id 1  -Activity "Downloading clips/videos of $($AccountContent.broadcaster_name)" -Completed
    $UserFollowsCount++
}

Write-Progress -Activity "Follow of $($UserFollow.to_name)" -Completed
