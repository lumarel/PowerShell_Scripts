<#
.SYNOPSIS
    Script to download clips from Twitch by channels (name or id) or subscribed channels by a user

.DESCRIPTION
    As Twitch changed its way how the frontend looks it isn't that simple anymore to parse the clips, as well as download them.
    This script should solve this problem as it fetches the clips and downloads them via youtube-dl.exe

.PARAMETER broadcaster_name
    This is the descriptive name which has been chosen by the user

.PARAMETER broadcaster_id
    This is the autogenerated userid which has been given by Twitch

.PARAMETER Subscription
    With this switch the broadcaster_name will act as user, and all clips by any followed channel will be downloaded

.PARAMETER SubscriberOnly
    Is an addition to Subscription to only download clips made by the user broadcaster_name

.PARAMETER ConfigFile
    Configurationfile for ClientID and OAuthToken (as well as other parameters but intended for these two)
    Default filepath is the same directory called as .tokens.ps1

.PARAMETER FilePath
    Specifies the output-directory to which the files will be downloaded

.PARAMETER ClientID
    Passed to authorization endpoints to identify your application. You cannot change your application's client id.
    Please create a application on the Twitch dev page and fill it in here

.PARAMETER OAuthToken
    Private token which gives the access to the API
    Specifically this is a app access token, which can be generated like mentioned in the docs:
    https://dev.twitch.tv/docs/authentication/getting-tokens-oauth#oauth-client-credentials-flow

.EXAMPLE
    .\Invoke-TwitchClipDownload.ps1 -broadcaster_id '123456789'

.EXAMPLE
    .\Invoke-TwitchClipDownload.ps1 -broadcaster_name 'Twitch'

.EXAMPLE
    .\Invoke-TwitchClipDownload.ps1 -broadcaster_name 'Twitch' -Subscription
    
.EXAMPLE
    .\Invoke-TwitchClipDownload.ps1 -broadcaster_name 'Twitch' -Subscription -SubscriberOnly

.EXAMPLE
    .\Invoke-TwitchClipDownload.ps1 -broadcaster_name 'Twitch' -Subscription -FilePath ($env:USERPROFILE + '\Desktop')

.EXAMPLE
    .\Invoke-TwitchClipDownload.ps1 -broadcaster_id '123456789' -ClientID 'uo6dggojyb8d6soh92zknwmi5ej1q2' -OAuthToken 'prau3ol6mg5glgek8m89ec2s9q5i3i'
#>

param(
    [Parameter(Mandatory=$true,ParameterSetName='name')]
    [Parameter(Mandatory=$true,ParameterSetName='name_config')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_config')]
    [Alias('UserName')][string]$broadcaster_name,
    [Parameter(Mandatory=$true,ParameterSetName='id')]
    [Parameter(Mandatory=$true,ParameterSetName='id_config')]
    [string]$broadcaster_id,
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_config')]
    [switch]$Subscription,
    [Parameter(ParameterSetName='subscriptions')]
    [Parameter(ParameterSetName='subscriptions_config')]
    [switch]$SubscriberOnly,
    [Parameter(ParameterSetName='name_config')]
    [Parameter(ParameterSetName='id_config')]
    [Parameter(ParameterSetName='subscriptions_config')]
    [string]$ConfigFile = '.\.tokens.ps1',
    [string]$FilePath = $env:USERPROFILE + '\Downloads',
    [Parameter(Mandatory=$true,ParameterSetName='name')]
    [Parameter(Mandatory=$true,ParameterSetName='id')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [string]$ClientID,
    [Parameter(Mandatory=$true,ParameterSetName='name')]
    [Parameter(Mandatory=$true,ParameterSetName='id')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [string]$OAuthToken
)
if(-not($ClientID -and $OAuthToken)) {
    . $ConfigFile
}
$OAuthToken = 'Bearer ' + $OAuthToken
if (-not (Get-Item $FilePath -ErrorAction SilentlyContinue)) {
    Write-Verbose -Message 'Creating directory, as it is missing'
    New-Item $FilePath -ItemType Directory
}

if ($broadcaster_name) {
    Write-Verbose -Message 'Invoking request to get broadcaster_id'
    $jsonUserName = Invoke-WebRequest -Uri "https://api.twitch.tv/helix/users?login=$broadcaster_name" -Headers @{'Client-ID' = $ClientID; 'Authorization' = $OAuthToken}
    $broadcaster_id = ($jsonUserName.Content | ConvertFrom-Json | Select-Object -ExpandProperty data).id
}

if ($Subscription) {
    Write-Verbose -Message ''
    $UserFollows = @()
    $UserFollowsPagination = ''
    $UserFollowsPaginationCount = 1
    do {
        Write-Verbose -Message "Invoking request to get channels followed by the broadcaster $($UserFollowsPaginationCount * 100 - 99) to $($UserFollowsPaginationCount * 100)"
        $jsonUserFollows = Invoke-WebRequest -Uri "https://api.twitch.tv/helix/users/follows?from_id=$broadcaster_id&first=100&after=$UserFollowsPagination" -Headers @{'Client-ID' = $ClientID; 'Authorization' = $OAuthToken}
        $UserFollows += $jsonUserFollows.Content | ConvertFrom-Json | Select-Object -ExpandProperty data
        $UserFollowsPagination = ($jsonUserFollows | ConvertFrom-Json | Select-Object -ExpandProperty pagination).cursor

        $UserFollowsPaginationCount++
    } while ($null -ne $UserFollowsPagination)
} else {
    $UserFollows = @{}
    $UserFollows | Add-Member -Name 'to_id' -Value $broadcaster_id -MemberType NoteProperty
}

$UserFollowsCount = 1
foreach ($UserFollow in $UserFollows) {
    if ($Subscription) {
        Write-Progress -Activity "Subscription of $($UserFollow.to_name)" -PercentComplete (($UserFollowsCount / $UserFollows.Count) * 100) -Status "Subscription $UserFollowsCount of $($UserFollows.Count)"
    }

    $AccountClips = @()
    $AccountClipsPagination = ''
    $AccountClipsPaginationCount = 1
    do {
        Write-Verbose -Message "Invoking request to get clip $($AccountClipsPaginationCount * 100 - 99) to $($AccountClipsPaginationCount * 100)"
        $jsonAccountClips = Invoke-WebRequest -Uri "https://api.twitch.tv/helix/clips?broadcaster_id=$($UserFollow.to_id)&first=100&after=$AccountClipsPagination" -Headers @{'Client-ID' = $ClientID; 'Authorization' = $OAuthToken}

        $AccountClips += $jsonAccountClips.Content | ConvertFrom-Json | Select-Object -ExpandProperty data
        $AccountClipsPagination = ($jsonAccountClips | ConvertFrom-Json | Select-Object -ExpandProperty pagination).cursor

        $AccountClipsPaginationCount++
    } while ($null -ne $AccountClipsPagination)

    if ($SubscriberOnly) {
        $AccountClips = $AccountClips | Where-Object creator_id -eq $broadcaster_id
    }

    $AccountClipsCount = 1
    foreach ($AccountClip in $AccountClips) {
        Write-Progress -Id 1 -Activity "Downloading Clips of $($AccountClip.broadcaster_name)" -PercentComplete (($AccountClipsCount / $AccountClips.Count) * 100) -Status "Clip $AccountClipsCount of $($AccountClips.Count)"
        $FileName = $AccountClip.created_at.Year.ToString('0000') + '-' + $AccountClip.created_at.Month.ToString('00') + '-' + $AccountClip.created_at.Day.ToString('00') + '_' + $AccountClip.title + '_' + $AccountClip.broadcaster_name + '_' + $AccountClip.creator_name + '.%(ext)s'
        $FileNameNormalized = $FileName -replace ' ','_' -replace '\\','' -replace '/',''
        $FullPath = $FilePath + '\' + $FileNameNormalized
        $AccountClip.url | youtube-dl.exe --batch-file - --output $FullPath

        $AccountClipsCount++
    }

    $UserFollowsCount++
}