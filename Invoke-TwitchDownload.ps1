#requires -version 6.0

<#
.SYNOPSIS
    Script to download clips or videos from Twitch by channels (name or id) or subscribed channels by a user

.DESCRIPTION
    As Twitch changed its way how the frontend looks it isn't that simple anymore to parse the clips/videos, as well as download them.
    This script should solve this problem as it fetches the clips/videos and downloads them via youtube-dl.exe

.PARAMETER broadcaster_name
    This is the descriptive name which has been chosen by the user

.PARAMETER broadcaster_id
    This is the autogenerated userid which has been given by Twitch

.PARAMETER Subscription
    With this switch the broadcaster_name will act as user, and all clips by any followed channel will be downloaded

.PARAMETER SubscriberOnly
    Is an addition to Subscription to only download clips made by the user broadcaster_name

.PARAMETER ConfigFile
    Configurationfile for ClientID and OAuthToken (as well as other parameters but intended for these two)
    Default filepath is the same directory called as .tokens.ps1 in this format:
    SOF
    $ClientID = 'uo6dggojyb8d6soh92zknwmi5ej1q2'
    $OAuthToken = 'prau3ol6mg5glgek8m89ec2s9q5i3i'
    EOF

.PARAMETER VODDownload
    This switch switches to video/VOD download
    Attention, this might take a long time, as these videos are massively larger than clips!

.PARAMETER FilePath
    Specifies the output-directory to which the files will be downloaded

.PARAMETER YoutubeDLexe
    Specifies the path to the youtube-dl.exe file
    By default it is configured to find the executable in the user/system PATH variable

.PARAMETER ClientID
    Passed to authorization endpoints to identify your application. You cannot change your application's client id.
    Please create a application on the Twitch dev page and fill it in here

.PARAMETER OAuthToken
    Private token which gives the access to the API
    Specifically this is a app access token, which can be generated like mentioned in the docs:
    https://dev.twitch.tv/docs/authentication/getting-tokens-oauth#oauth-client-credentials-flow

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_id '123456789'

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_name 'Twitch'

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_name 'Twitch' -VODDownload

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_name 'Twitch' -YoutubeDLexe 'C:\Program Files\youtube-dl\youtube-dl.exe'

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_name 'Twitch' -Subscription

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_name 'Twitch' -Subscription -VODDownload
    
.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_name 'Twitch' -Subscription -SubscriberOnly

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_name 'Twitch' -Subscription -FilePath ($env:USERPROFILE + '\Desktop')

.EXAMPLE
    .\Invoke-TwitchDownload.ps1 -broadcaster_id '123456789' -ClientID 'uo6dggojyb8d6soh92zknwmi5ej1q2' -OAuthToken 'prau3ol6mg5glgek8m89ec2s9q5i3i'

.NOTES
    Having problems with downloading? Update the youtube-dl.exe first, there might already be a fix for that!
#>

param(
    [Parameter(Mandatory=$true,ParameterSetName='name')]
    [Parameter(Mandatory=$true,ParameterSetName='name_config')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_config')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_vod')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_config_vod')]
    [Alias('UserName')][string]$broadcaster_name,
    [Parameter(Mandatory=$true,ParameterSetName='id')]
    [Parameter(Mandatory=$true,ParameterSetName='id_config')]
    [string]$broadcaster_id,
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_config')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_vod')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_config_vod')]
    [switch]$Subscription,
    [Parameter(ParameterSetName='subscriptions')]
    [Parameter(ParameterSetName='subscriptions_config')]
    [switch]$SubscriberOnly,
    [Parameter(ParameterSetName='name_config')]
    [Parameter(ParameterSetName='id_config')]
    [Parameter(ParameterSetName='subscriptions_config')]
    [Parameter(ParameterSetName='subscriptions_config_vod')]
    [string]$ConfigFile = '.\.tokens.ps1',
    [Parameter(ParameterSetName='name')]
    [Parameter(ParameterSetName='name_config')]
    [Parameter(ParameterSetName='id')]
    [Parameter(ParameterSetName='id_config')]
    [Parameter(ParameterSetName='subscriptions_vod')]
    [Parameter(ParameterSetName='subscriptions_config_vod')]
    [switch]$VODDownload,
    [string]$FilePath = $env:USERPROFILE + '\Downloads',
    [string]$YoutubeDLexe = 'youtube-dl.exe',
    [Parameter(Mandatory=$true,ParameterSetName='name')]
    [Parameter(Mandatory=$true,ParameterSetName='id')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_vod')]
    [string]$ClientID,
    [Parameter(Mandatory=$true,ParameterSetName='name')]
    [Parameter(Mandatory=$true,ParameterSetName='id')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions')]
    [Parameter(Mandatory=$true,ParameterSetName='subscriptions_vod')]
    [string]$OAuthToken
)
if(-not($ClientID -and $OAuthToken)) {
    . $ConfigFile
}
$OAuthToken = 'Bearer ' + $OAuthToken
if (-not (Get-Item $FilePath -ErrorAction SilentlyContinue)) {
    Write-Verbose -Message 'Creating directory, as it is missing'
    New-Item $FilePath -ItemType Directory
}

if ($broadcaster_name) {
    Write-Verbose -Message 'Invoking request to get broadcaster_id'
    $jsonUserName = Invoke-WebRequest -Uri "https://api.twitch.tv/helix/users?login=$broadcaster_name" -Headers @{'Client-ID' = $ClientID; 'Authorization' = $OAuthToken}
    $broadcaster_id = ($jsonUserName.Content | ConvertFrom-Json | Select-Object -ExpandProperty data).id
}

if ($Subscription) {
    Write-Verbose -Message ''
    $UserFollows = @()
    $UserFollowsPagination = ''
    $UserFollowsPaginationCount = 1
    do {
        Write-Verbose -Message "Invoking request to get channels followed by the broadcaster $($UserFollowsPaginationCount * 100 - 99) to $($UserFollowsPaginationCount * 100)"
        $jsonUserFollows = Invoke-WebRequest -Uri "https://api.twitch.tv/helix/users/follows?from_id=$broadcaster_id&first=100&after=$UserFollowsPagination" -Headers @{'Client-ID' = $ClientID; 'Authorization' = $OAuthToken}
        $UserFollows += $jsonUserFollows.Content | ConvertFrom-Json | Select-Object -ExpandProperty data
        $UserFollowsPagination = ($jsonUserFollows | ConvertFrom-Json | Select-Object -ExpandProperty pagination).cursor

        $UserFollowsPaginationCount++
    } while ($null -ne $UserFollowsPagination)
} else {
    $UserFollows = @{}
    $UserFollows | Add-Member -Name 'to_id' -Value $broadcaster_id -MemberType NoteProperty
}

$UserFollowsCount = 1
foreach ($UserFollow in $UserFollows) {
    if ($Subscription) {
        Write-Progress -Activity "Subscription of $($UserFollow.to_name)" -PercentComplete (($UserFollowsCount / $UserFollows.Count) * 100) -Status "Subscription $UserFollowsCount of $($UserFollows.Count)"
    }

    $AccountContents = @()
    $AccountContentsPagination = ''
    $AccountContentsPaginationCount = 1
    do {
        if ($VODDownload) {
            Write-Verbose -Message "Invoking request to get video $($AccountContentsPaginationCount * 100 - 99) to $($AccountContentsPaginationCount * 100)"
            $jsonAccountContents = Invoke-WebRequest -Uri "https://api.twitch.tv/helix/videos?user_id=$($UserFollow.to_id)&first=100&after=$AccountContentsPagination" -Headers @{'Client-ID' = $ClientID; 'Authorization' = $OAuthToken}
        } else {
            Write-Verbose -Message "Invoking request to get clip $($AccountContentsPaginationCount * 100 - 99) to $($AccountContentsPaginationCount * 100)"
            $jsonAccountContents = Invoke-WebRequest -Uri "https://api.twitch.tv/helix/clips?broadcaster_id=$($UserFollow.to_id)&first=100&after=$AccountContentsPagination" -Headers @{'Client-ID' = $ClientID; 'Authorization' = $OAuthToken}
        }

        $AccountContents += $jsonAccountContents.Content | ConvertFrom-Json | Select-Object -ExpandProperty data
        $AccountContentsPagination = ($jsonAccountContents | ConvertFrom-Json | Select-Object -ExpandProperty pagination).cursor

        $AccountContentsPaginationCount++
    } while ($null -ne $AccountContentsPagination)

    if ($SubscriberOnly) {
        $AccountContents = $AccountContents | Where-Object creator_id -eq $broadcaster_id
    }

    $AccountContentsCount = 1
    foreach ($AccountContent in $AccountContents) {
        Write-Progress -Id 1 -Activity "Downloading clips/videos of $($AccountContent.broadcaster_name)" -PercentComplete (($AccountContentsCount / $AccountContents.Count) * 100) -Status "Clip/Video $AccountContentsCount of $($AccountContents.Count)"
        $FileName = $AccountContent.created_at.Year.ToString('0000') + '-' + $AccountContent.created_at.Month.ToString('00') + '-' + $AccountContent.created_at.Day.ToString('00') + '_' + $AccountContent.title + '_' + $AccountContent.broadcaster_name + '_' + $AccountContent.creator_name + '.%(ext)s'
        $FileNameNormalized = $FileName -replace ' ','_' -replace '\\','' -replace '/',''
        $FullPath = $FilePath + '\' + $FileNameNormalized
        $AccountContent.url | & $YoutubeDLexe --batch-file - --output $FullPath

        $AccountContentsCount++
    }

    $UserFollowsCount++
}